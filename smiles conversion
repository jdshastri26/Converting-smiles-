Step-by-Step Plan

    Install RDKit: Ensure RDKit is installed in your Python environment.
    Convert SMILES to Molecular Structure: Use RDKit to generate the molecular structure from the SMILES string.
    Visualize the Molecule: Display the molecule to verify its structure.
    Export the Structure: Save the structure in a PDB format for further use.






# Ensure RDKit is installed
# pip install rdkit-pypi

from rdkit import Chem
from rdkit.Chem import AllChem, Draw
from rdkit.Chem.rdmolfiles import MolToPDBFile

# Function to convert SMILES to structure and export
def smiles_to_structure(smiles: str, output_filename: str):
    # Convert SMILES to molecule
    molecule = Chem.MolFromSmiles(smiles)
    if not molecule:
        raise ValueError("Invalid SMILES string")
    
    # Generate 3D coordinates
    molecule = Chem.AddHs(molecule)
    AllChem.EmbedMolecule(molecule, AllChem.ETKDG())
    AllChem.UFFOptimizeMolecule(molecule)
    
    # Optional: Visualize the molecule
    img = Draw.MolToImage(molecule)
    img.show()
    
    # Export the structure to PDB format
    MolToPDBFile(molecule, output_filename)
    print(f"Structure saved to {output_filename}")

# Provided SMILES string
smiles_string = "FC(c1cc(nc(c1)c1cccnc1)c1cccnc1)CC1C=CC=C1"
output_file = "molecule_structure.pdb"

# Convert SMILES to structure and export
smiles_to_structure(smiles_string, output_file)

Explanation

    Import RDKit Modules: Import necessary RDKit modules for molecular operations.
    Convert SMILES to Molecule: Convert the SMILES string to a molecule object.
    Generate 3D Coordinates: Add hydrogen atoms and generate 3D coordinates using RDKit's ETKDG method and optimize using UFF.
    Visualize Molecule: Display the 2D structure of the molecule using RDKit's drawing capabilities.
    Export to PDB: Save the 3D structure of the molecule in PDB format for use in further simulations or analyses.

